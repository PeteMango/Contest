from typing import List

class Solution:
    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:
        sum, n = 0, len(nums)

        def dp(k: int) -> int:
            dp = [-1] * 1005
            dp[0] = 0

            for num in nums:
                for i in range(k - num, -1, -1):
                    if dp[i] >= 0:
                        dp[i + num] = max(dp[i + num], dp[i] + 1)
            return dp[k]

        return dp(target)

s = Solution()

nums = [1,2,3,4,5]
target = 9

nums = [4,1,3,2,1,5]
target = 7

nums = [1,1,5,4,5]
target = 3

nums = [38,6,89,28,6,59,21,87,97,26,7,80,30,92,94,2,40,81,87,49,86,25,39,54,66,2,73,43,58,2,79,50,58,80,68,51,41,35,65,90,40,50,6,36,72,48,46,20,4,12,59,91,56,59,29,29,12,76,42,74,2,66,51,34,43,5,44,61,90,97,97,24,73,28,64,10,62,98,22,24,60,1,91,60,73,63,89,63,23,5,83,61,36,69,26,56,8,14,95,92]
target = 850

nums = [62,46,82,34,16,73,23,77,41,20,66,54,45,20,16,14,98,15,80,63,5,99,84,48,98,79,94,22,36,5,7,25,33,14,86,89,13,99,1,47,31,11,58,79,78,27,42,14,3,82,45,93,35,81,8,94,98,36,11,16,40,7,51,61,18,70,93,58,66,28,70,62,1,17,71,99,60,10,90,73,54,99,82,94,81,3,74,92,20,58,44,43,1,63,53,44,26,40,94,45]
target = 789

nums = [73,23,81,84,81,14,48,35,68,11,75,38,97,53,11,42,44,40,90,41,27,23,55,54,96,23,21,26,67,47,40,85,73,89,3,80,100,96,55,48,70,88,17,87,98,61,94,86,1,10,41,13,80,24,79,36,34,72,92,19,3,63,5,73,86,52,60,13,95,69,57,24,26,28,27,92,61,19,56,74,12,18,73,11,99,95,1,54,65,46,96,47,70,11,33,79,74,63,80,49]
target = 105

print(s.lengthOfLongestSubsequence(nums, target))
